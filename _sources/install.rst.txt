Compiler QGIS 3 depuis son code source
======================================

Avec ubuntu 19.10 (*Eoan Ermine*).

Matériel nécessaire :

  - Avoir une console ouverte

Objectif :

  - Compiler QGIS 3-nightly et l'installer dans ${HOME}/apps
    (pour ne pas créer de conflits avec un éventuel QGIS installé par Ubuntu)

.. figure:: img/00xx.png
  :width: 40  %
  :align: center
  :figwidth: 98%


Préparer les dossiers d'installation
------------------------------------

.. code-block:: bash

  mkdir ~/dev # Pour héberger le code source
  mkdir ${HOME}/apps # Pour héberger les binaires compilés et les fichiers partagés


Récupérer le code source de PROJ.6 et de QGIS
---------------------------------------------

.. code-block:: bash

  cd ~/dev
  wget https://download.osgeo.org/proj/proj-6.3.1.tar.gz
  git clone https://github.com/qgis/QGIS/


Installer les dépendances *(avec apt)*
--------------------------------------

Dans la console:

.. code-block:: bash

  sudo gedit /etc/apt/sources.list


Dans le fichier qui s'ouvre décommenter les lignes :
  - qui, à la fois, commencent par **'deb'**, contiennent le mot **'bionic'** et contiennent le mot **'universe'** :)

Puis mettre à jour la listes des packages :

.. code-block:: bash

  sudo apt update

Puis installer les dépendances attendues (la liste est importante mais une grande
partie de ces packages est normalement déjà installée) :

.. code-block:: bash

  sudo apt-get install bison ca-certificates ccache cmake cmake-curses-gui \
  dh-python doxygen expect flex flip gdal-bin git graphviz grass-dev \
  libexiv2-dev libexpat1-dev libfcgi-dev libgdal-dev libgeos-dev libgsl-dev \
  libpq-dev libproj-dev libqca-qt5-2-dev libqca-qt5-2-plugins \
  libqscintilla2-qt5-dev libqt5opengl5-dev libqt5serialport5-dev \
  libqt5sql5-sqlite libqt5svg5-dev libqt5webkit5-dev libqt5xmlpatterns5-dev \
  libqwt-qt5-dev libspatialindex-dev libspatialite-dev libsqlite3-dev \
  libsqlite3-mod-spatialite libyaml-tiny-perl libzip-dev lighttpd locales \
  ninja-build ocl-icd-opencl-dev opencl-headers pkg-config poppler-utils \
  pyqt5-dev pyqt5-dev-tools pyqt5.qsci-dev python3-all-dev python3-autopep8 \
  python3-dateutil python3-dev python3-future python3-gdal python3-httplib2 \
  python3-jinja2 python3-lxml python3-markupsafe python3-mock python3-nose2 \
  python3-owslib python3-plotly python3-psycopg2 python3-pygments python3-pyproj \
  python3-pyqt5 python3-pyqt5.qsci python3-pyqt5.qtsql python3-pyqt5.qtsvg \
  python3-pyqt5.qtwebkit python3-requests python3-sip python3-sip-dev \
  python3-six python3-termcolor python3-tz python3-yaml \
  qt3d-assimpsceneimport-plugin qt3d-defaultgeometryloader-plugin \
  qt3d-gltfsceneio-plugin qt3d-scene2d-plugin qt3d5-dev qt5-default \
  qt5keychain-dev qtbase5-dev qtbase5-private-dev qtpositioning5-dev \
  qttools5-dev qttools5-dev-tools saga spawn-fcgi sqlite3 txt2tags xauth \
  xfonts-100dpi xfonts-75dpi xfonts-base xfonts-scalable xvfb

Compiler / installer la bibliothèque PROJ (6.3.1)
-------------------------------------------------

.. code-block:: bash

  tar -xvzf proj-6.3.1.tar.gz && cd proj-6.3.1/
  ./configure --prefix=~/apps/proj
  make -j8  # Remplacer 8 par le nombre de coeurs à utiliser
  make install

Préparer l'installation de QGIS
-------------------------------

On se rend dans le dossier du code source de QGIS et on créé un dossier qui va contenr les fichiers de configuration utilisés pour la compilation :

.. code-block:: bash

  cd ~/dev/QGIS
  mkdir build-master
  cd build-master

Deux solutions :

a) ... si on souhaite ouvrir l'interface interactive de configuration :

  .. code-block:: bash

    ccmake ..

  | Là une fenêtre interative s'ouvre. Elle est normalement vide.
  | Appuyer une premiere fois sur [c] (et attendre qu'elle se remplisse).
  | Une fois les options affichées, modifier la clé ``CMAKE_INSTALL_PREFIX`` pour lui donner la valeur correspondant au dossier d'installation souhaité et créer précédemment par exemple ``/home/mthh/apps``.
  | Valider ce changement en apuyant à nouveau sur [c].
  | Appuyer sur [g] pour générer le fichier de configuration.
  | Une fois cette étape terminée, le shell est de nouveaux accessible.

b) ... si on connait déjà les valeurs des propriétés qu'on veut modifier on peut utiliser la commande ``cmake`` directement, en spécifiant les paramètres avec ``-D`` :

  .. code-block:: bash

    ccmake -D CMAKE_BUILD_TYPE=Debug \
           -D CMAKE_INSTALL_PREFIX=${HOME}/apps \
           -D PROJ_INCLUDE_DIR=/home/mthh/apps/proj/include \
           -D PROJ_LIBRARY=/home/mthh/apps/proj/lib/libproj.so \
           -D GRASS_PREFIX7=/usr/lib/grass76 \
           ..


Compiler le code
----------------


On veut maintenant compiler QGIS. Attention cette opération peut prendre une ou plusieurs dizaines de minutes.

.. code-block:: bash

  make -j8 # Remplacer 8 par le nombre de coeurs à utiliser

Une fois l'opération terminée avec succès, on peut vérifier que QGIS 3 fonctionne correctement :

.. code-block:: bash

  ./output/bin/qgis


Si c'est le cas on peut l'installer dans le dossier définir précédemment (``${HOME}/apps`` dans notre cas) :

.. code-block:: bash

  make install

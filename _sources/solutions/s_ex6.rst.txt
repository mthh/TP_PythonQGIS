Correction - Exercice 6 : Automatisation d'actions répétitives
==============================================================

- **À vous de jouer !**
  Écrire un script permettant de :

    * se rendre dans le dossier dans lequel vous avez décompresser la première archive,
    * y dézipper la seconde (``malta-latest.shp.zip``) dans le même dossier,
    * lister les styles disponibles (fichiers ``.qml`` dans le dossier ``Styles``),
    * utiliser leurs noms pour charger les fichiers *Shapefile* correspondants,
    * appliquer le style approprié à chacune des couches.

**Solution** :
::

  import os
  import zipfile

  # Se rendre dans le dossier approprié
  # (attention au chemin qui doit etre modifié !)
  os.chdir('/home/mthh/Bureau/ex4')

  # Extraire l'archive zippée précédemment téléchargée
  zip_ref = zipfile.ZipFile('malta-latest-free.shp.zip', 'r')
  zip_ref.extractall('.')
  zip_ref.close()

  # Doit-on demander un nouveau rendu sur chaque couche ?
  if iface.mapCanvas().isCachingEnabled():
      repaint = True
  else:
      repaint = False

  # Enlever les couches existantes dans le projet actuel
  project = QgsProject.instance()
  project.clear()

  # Créer une liste contenant le nom de chacune
  # des couches à ajouter en fonction des styles disponibles
  names = [n.replace('.qml', '') for n in os.listdir('Styles')]

  # Ajouter chacune de ces couches et lui appliquer son style
  for name in names:
      layer = iface.addVectorLayer(name + '.shp', name, 'ogr')
      layer.loadNamedStyle('Styles/' + name + '.qml')
      if repaint:
          layer.triggerRepaint()

  if not repaint:
      iface.mapCanvas().refresh()


- Et l'ordre des couches ?

**Solution**
::

 ordre = [
     'gis_osm_traffic_a_free_1',
     'gis_osm_pofw_a_free_1',
     'gis_osm_places_free_1',
     'gis_osm_natural_free_1',
     'gis_osm_roads_free_1',
     'gis_osm_buildings_a_free_1',
     'gis_osm_pois_a_free_1',
     'gis_osm_water_a_free_1',
     'gis_osm_waterways_free_1',
     'gis_osm_landuse_a_free_1',
     'gis_osm_natural_a_free_1',
 ]

 root = QgsProject.instance().layerTreeRoot()
 for ix, name in enumerate(ordre):
     layer = QgsProject.instance().mapLayersByName(name)[0]
     layer_node = root.findLayer(layer.id())
     node = layer_node.clone()
     root.insertChildNode(ix, node)
     root.removeChildNode(layer_node)



- Nous devons maintenant régler l'opacité de chacune des couches de
  type ``Polygon`` à 90%.

**Solution**

::

  for layer in iface.mapCanvas().layers():
      if layer.wkbType() in (
            QgsWkbTypes.Polygon, QgsWkbTypes.MultiPolygon):
          layer.setOpacity(0.9)

  iface.mapCanvas().refresh()

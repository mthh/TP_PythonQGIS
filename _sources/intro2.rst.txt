Introduction QGIS et rappels Python
===================================

.. image:: img/QGIS_logo_new.svg
  :width: 18%
  :align: center

QGIS est un logiciel de SIG distribué sous licence libre GNU GPL.
C'est un projet officiel de la fondation OSGeo (Open Source Geospatial) qui
permet de visualiser, gérer, éditer, analyser des données géospatiales et de composer des cartes.
Les formats de données (vecteurs et rasters) qu'il supporte sont très nombreux
et il permet également de se connecter à différents types de bases de données.

QGIS est developpé en C++ (en utilisant notamment le framework Qt) et
il est notamment compatible avec GNU/Linux, Max OS X et Windows.

Depuis QGIS 0.9 le logiciel dispose d'une API python permettant :

- d'appeler l'API depuis la console Python de QGIS.
- de créer des plugins pour QGIS.
- de créer des applications externes appelant les fonctionnalités de QGIS.


Pourquoi Python-QGIS ?
----------------------

- Automatiser des actions répétitives
- Faire tourner des scripts
- Effectuer des traitements spécifiques
- Développer ses propre plugins
- Développer ses propres applications


Quelle(s) version(s) utiliser ?
-------------------------------

.. note::
  **Ce TP a été conçu QGIS 3.**

| Par rapport à QGIS 2.x, la version 3 présente l'avantage d'utiliser **Python 3** et **Qt 5**.
| Le versionnement et le développement de QGIS suivent un planning temporel : une nouvelle version stable tous les 4 mois.
| La liste des fonctionnalités ajoutées à chaque version peut être consultée en ligne : http://changelog.qgis.org/en/qgis/version/list/.

La **documentation complète** de l'API python qui va être utilisée est disponible en ligne : https://qgis.org/pyqgis/3.16/.

*Avant la version 3 on ne trouve de documentation de ce type pour l'API PyQgis mais il est possible de se référer à la documentation complète
de l'API QGIS en C++ dont est dérivée l'API Python :* https://qgis.org/api/2.18/


Console Python dans QGIS
------------------------

QGIS dispose d'une puissante interface de programmation qui permet d'étendre ses
fonctionnalités notamment en écrivant des scripts pour automatiser les traitements.
Cette API Python est généralement désignée sous le nom de **PyQgis**.

Même en étant débutant, en apprenant un peu de python, l'interface de programmation de QGIS permet
d'être plus productif (automatisation d'actions répétitives,
chargement personnalisé au démarrage de l'application, contournement de limites
imposées par l'interface graphique, etc.).

Ce tutoriel ne nécessite que peu de connaissances en programmation Python et
a pour but de donner une introduction aux capacités de scripting dans QGIS avec PyQGIS.

.. note::
  Dans les exercices suivants, faîtes l'effort d'écrire le code plutôt que de le copier-coller.
  Cela facilitera votre compréhension et vous évitera d'éventuelles erreurs de syntaxe.

QGIS fournit une console interactive python. Elle peut être ouverte depuis le
menu ``Extension > Console Python``, en pressant :kbd:`CTRL` + :kbd:`ALT` + :kbd:`P` ou en appuyant
sur l'icone qui lui est dédiée.

Lors de l'utilisation de la console Python dans QGIS, une variable ``iface`` est
déjà existante. Cette variable est une instance de ``QgisInterface`` et elle
permet d'accéder au canevas de la carte, aux menus, barres d'outils et aux
autres parties de l'application QGIS ouverte.
De même lors du démarrage d'une session interactive dans cette console,
les imports suivants sont réalisés :

::

  from qgis.core import *
  import qgis.utils


Rappels Python
--------------

Lors de l'utilisation interactive de la console Python, la fonction native ``dir()`` pourra s'avérer très utile : en
effet elle permet d'obtenir une liste d’attributs valides pour l'objet qui lui est donné en argument.

Par exemple, la liste des attributs d'une variable (ici de type ``list``) peut être récupérée
de la manière suivante :
::

  a = [1, 2, 3]
  dir(a) # Retourne une liste contenant les attributs de 'a'


Par ailleurs il est possible de connaitre le type de cette variable en utilisant
la fonction native ``type()`` :

::

  type(iface)
  # <class 'qgis._gui.QgisInterface'>

Cette fonctionnalité pourra être utile pour aller chercher des informations
dans la `documentation de l'API PyQgis <https://qgis.org/pyqgis/3.16/>`_
(ici à propos des objets de type ``QgisInterface``).


**Formater une chaîne de caractères**

En utilisant la méthode ``format`` des objets de type ``str`` (chaîne de caractères) :

::

  age = 30
  prenom = 'Jack'
  result = 'La personne nommée {} a {} ans'.format(prenom, age)
  print(result)

Pour en savoir plus : https://www.docstring.fr/blog/le-formatage-des-chaines-de-caracteres-avec-python/#la-methode-format.


**Objects de type "dictionnaire"**

Un objet de type ``dict`` (un dictionnaire) est une collection permettant de rassembler des
éléments qui sont identifiés par une **clé**, associée à une **valeur** (on parle souvent de paires clé/valeur).

La syntaxe qui permet de créer un dictionnaire utilise des **accolades**
(là où les listes utilisent des crochets) et chaque élément est spécifié au travers de sa clé
et de sa valeur associée (clé et valeur sont séparées par ``:``).

::

  # Un dictionnaire avec deux éléments :
  mon_dico = {"age": 30, "prenom": "Jack"}

  # Accéder aux élément :
  print(mon_dico["age"])
  print(mon_dico["prenom"])

  # Construction en partant d'un dictionnaire vide
  mon_dico = {}
  mon_dico["age"] = 30
  mon_dico["prenom"] = "Jack"

  # On peut donc modifier la valeur associée à une clé
  # ou ajouter de nouvelles paires de clé/valeur
  mon_dico["age"] = 31
  mon_dico["nom"] = "Dupont"

  print(mon_dico)

Pour en savoir plus :
- https://gayerie.dev/docs/python/python3/dict.html
- https://python.doctor/page-apprendre-dictionnaire-python


**Liste de compréhension**

Voyons comment faire une action simple sur les éléments d'une liste : multiplier
chacun de ses éléments par 2.

::

  ma_liste = [1, 3, 5]
  resultat = []
  for nb in ma_liste:
      resultat.append(nb * 2)

  print(resultat) # va afficher [2, 6, 10]

Ce type de construction peut-être raccourcie en utilisant une **liste de compréhension** :

::

  ma_liste = [1, 3, 5]
  resultat = [nb * 2 for nb in ma_liste]

  print(resultat) # va afficher [2, 6, 10]

Maintenant que nous savons manipuler dictionnaires et listes de compréhension,
voyons un exemple d'une liste de compréhension qui permet d'extraire
toute les valeurs pour un clé spécifique (``age``) des dictionnaires présents
dans une liste.

::

  # une liste de 3 dictionnaires
  ma_liste = [
      {"age": 30, "prenom": "Jack"},
      {"age": 33, "prenom": "Emma"},
      {"age": 26, "prenom": "Pierre"}
  ]

  # boucle traditionnelle
  les_ages = []
  for d in ma_liste:
    les_ages.append(d["age"])

  # liste de compréhension
  les_ages = [d["age"] for d in ma_liste]

  print(les_ages) # va afficher [30, 33, 26]

Et un exemple permettant de récupérer tous les dictionnaires dont la clé "age"
est supérieur ou égale à 30 :

::

  # une liste de 3 dictionnaires
  ma_liste = [
      {"age": 30, "prenom": "Jack"},
      {"age": 33, "prenom": "Emma"},
      {"age": 26, "prenom": "Pierre"}
  ]

  # boucle traditionnelle
  personne_audessus_30 = []
  for d in ma_liste:
      if d["age"] >= 30:
          personne_audessus_30.append(d)

  # liste de compréhension
  personne_audessus_30 = [d for d in ma_liste if d["age"] >= 30]

  print(personne_audessus_30)
  # va afficher
  # [{"age": 30, "prenom": "Jack"}, {"age": 33, "prenom": "Emma"}]


Pour en savoir plus : https://code.tutsplus.com/fr/tutorials/list-comprehensions-in-python--cms-26836.

Si l'utilisation des listes de compréhension n'est pas indispensable (il est toujours possible
d'effectuer la même opération avec une boucle traditionnelle), il s'agit d'une construction
qui est souvent rencontrée dans le code Python et elle figure dans la correction
de certains des exercices de cette série de TP.

Exercice 2 : Manipulation des attributs d'une couche
====================================================

Objectif
--------

À partir d'une couche vecteur de points représentants les principaux aéroports,
créer un script python permettant d'exporter un fichier CSV contenant,
pour chaque aéroport *majeur* son nom, son code, sa latitude et sa longitude.

Données
-------

Les données proviennent de Natural Earth [#f1]_.

| -> ``TP_Python_Qgis/data/ex1-3/ne_10m_airports.shp`` (Points - Localisation des aéroports)
| -> ``TP_Python_Qgis/data/ex1-3/ne_10m_admin_0_countries.shp`` (Polygones - Pays du monde)

Procédure
---------

- Charger la couche vecteur ``ne_10m_airports.shp`` :

  * soit en faisant un glissé-déposé de ce fichier vers l'interface de QGIS,
  * soit en en utilisant le menu ``Couche > Ajouter une couche > Ajouter une couche vecteur...``

.. figure:: img/0_qgis_interface.png
  :width: 100%
  :align: center
  :figwidth: 98%


- De manière similaire, charger la couche ``ne_10m_admin_0_countries.shp``.

- Modifier le style des couches pour obtenir le résultat suivant :

  * Utilisation d'un pictogramme d'avion pour les aéroports
  * Utilisation d'un fond de couleur beige/jaune pour les pays du monde.

.. pull-quote::
   Rappel: Le style de chacune des couches peut-être modifié depuis le gestionnaire de couches, en sélectionannt une couche puis en faisant ``clic droit > Propriétés`` puis sélection de l'onglet *"Symbologie"*.
   QGIS offre de nombreux modes de rendu des couches (catégorisé, gradué, etc.) en fonction du type de couche et du type d'information à représenter.

.. figure:: img/1_qgis_ouverture_style.png
  :width: 100%
  :align: center
  :figwidth: 98%

  ..

.. figure:: img/2_qgis_apres_style.png
  :width: 100%
  :align: center
  :figwidth: 98%

  ..

- Utiliser l'outil "Identifier" pour visualiser les attributs de chacune des entités. Cet outil s'applique uniquement à la couche active.

.. figure:: img/3_qgis_identifier.png
  :width: 100%
  :align: center
  :figwidth: 98%

  ..

- Pour voir l'ensemble de la table de données relative à cette couche on peut ouvrir sa "table attributaire".

.. figure:: img/4_qgis_table_attributaire.png
  :width: 100%
  :align: center
  :figwidth: 98%

  ..

* Ouvrir la console python.

  S'assurer que la couche des aéroports est bien celle qui est active.

  * Parcourir les différentes entités de la couche :
    ::

      layer = iface.activeLayer()
      for ft in layer.getFeatures():
          print(ft)


  * Accéder aux attributs de chaque enregistrement :
    ::

      layer = iface.activeLayer()
      for ft in layer.getFeatures():
          print(ft['name'], ft['iata_code'], ft['type'])


  * Accéder à la géométrie de chaque enregistrement :
    ::

      layer = iface.activeLayer()
      for ft in layer.getFeatures():
          geom = ft.geometry()
          geom_point = geom.asPoint()
          # L'objet `QgsPoint` a notamment une méthode `x` et une méthode `y`
          print(geom_point, geom_point.x(), geom_point.y())


  * Obtenir les différentes modalités du champ ``type`` en parcourant les
    différentes entités dans une liste de compréhension :
    ::

      categories = list(set([ft['type'] for ft in layer.getFeatures()]))
      # print(categories)
      # ['military', 'spaceport', 'military mid', 'small', 'mid and military',
      #  'major and military', 'military major', 'mid', 'major']


  * Nous savons donc comment accéder aux différentes informations nécessaires pour réaliser l'export souhaité.
    L'export au format CSV va nécessiter de structurer les valeurs relatives à
    chaque enregistrement (ici à chaque aéroport) sous forme d'une liste.
    Le module ``csv`` de la bibliothèque standard [#f2]_ se chargera d'écrire
    correctement les valeurs de chaque enregistrement selon le type de fichier CSV souhaité.
    ::

      layer = iface.activeLayer()
      for ft in layer.getFeatures():
          geom_point = ft.geometry().asPoint()
          # Nos enregistrements seront donc de la forme suivante
          row = [ft['name'], ft['iata_code'], geom_point.x(), geom_point.y()]


  * Il suffit de quelques lignes supplémentaires pour écrire ces informations dans un fichier :

    QGIS 2 / Python 2
    ::

      import csv

      output_file = open('/home/mthh/airports.csv', 'w')
      csv_writer = csv.writer(output_file)

      header_line = ["Nom", "Code_IATA", "Latitude", "Longitude"]
      csv_writer.writerow(header_line)

      for ft in layer.getFeatures():
          # Les résultats ne sont pas encore filtrés selon le type d'aeroport !
          geom_point = ft.geometry().asPoint()
          csv_writer.writerow(
              [ft['name'].encode('utf-8'), ft['iata_code'], geom_point.x(), geom_point.y()])

      output_file.close()


    QGIS 3 / Python 3
    ::

      import csv

      output_file = open('/home/mthh/airports.csv', 'w', newline='')
      csv_writer = csv.writer(output_file)

      header_line = ["Nom", "Code_IATA", "Latitude", "Longitude"]
      csv_writer.writerow(header_line)

      for ft in layer.getFeatures():
          # Les résultats ne sont pas encore filtrés selon le type d'aeroport !
          geom_point = ft.geometry().asPoint()
          csv_writer.writerow(
              [ft['name'], ft['iata_code'], geom_point.x(), geom_point.y()])

      output_file.close()


  * | **À vous de jouer !**
    | Reprendre le script précédent et faire en sorte de n'exporter que les aéroports de type 'major' et 'major and military'.
    | Enregistrer ce script sous le nom `export_txt.py`.
    | Exécuter le script pour vérifier de son bon fonctionnement.
    | Le fichier CSV exporté doit être reconnu correctement par l'OS et s'ouvrir dans le tableur habituel (Calc, Excel, etc.).
    | **Combien de lignes contient ce nouveau fichier CSV ?**


* **Pour aller plus loin...**

  Le résultat attendu peut être obtenu de plusieurs manière différentes.
  En effet il est soit possible d'itérer sur l'ensemble des entités de la couche et de vérifier que le champ ``type`` de chaque entité
  et bien, soit ``major``, soit ``major and military``.

  .. code-block:: python
     :emphasize-lines: 2

      for ft in layer.getFeatures():
          if ft|'type'] in (u'major', u'major and military'):
              geom_point = ft.geometry().asPoint()
              csv_writer.writerow(
                  [ft['name'], ft['iata_code'], geom_point.x(), geom_point.y()])


Au regard des valeurs prises par le champ ``type`` il est également possible de vérifier
que la chaine de caractère du champ type commence bien par ``major`` en utilisant
la méthode

  .. code-block:: python
     :emphasize-lines: 2

      for ft in layer.getFeatures():
          if ft|'type'].startswith(u'major'):
              geom_point = ft.geometry().asPoint()
              csv_writer.writerow(
                  [ft['name'], ft['iata_code'], geom_point.x(), geom_point.y()])


Enfin, il est également possible d'utiliser une expression QGIS.

Avec QGIS 2 est nécessaire de créer un objet de type ``QgsExpression``.
Cet objet sera donné en argument à un objet de type ``QgsFeatureRequest``,
utilisé lors de l'appel de la méthode ``getFeatures`` déjà utilisée précédemment.

Avec QGIS 3 il est possible de passer directement la chaine de caractère qui
correspond à l'expression souhaitée en argument de la méthode ``getFeatures``.

  .. code-block:: python
     :emphasize-lines: 2,3,9

      # QGIS 2
      expr = QgsExpression(u"\"type\" LIKE 'major%'")
      for ft in layer.getFeatures(QgsFeatureRequest(expr)):
          geom_point = ft.geometry().asPoint()
          csv_writer.writerow(
              [ft['name'], ft['iata_code'], geom_point.x(), geom_point.y()])

      # QGIS 3
      for ft in layer.getFeatures("\"type\" LIKE 'major%'"):
          geom_point = ft.geometry().asPoint()
          csv_writer.writerow(
              [ft['name'], ft['iata_code'], geom_point.x(), geom_point.y()])


.. rubric:: Footnotes

.. [#f1] http://www.naturalearthdata.com/. Données téléchargées le 28/02/2019.
.. [#f2] https://docs.python.org/3/library/csv.html

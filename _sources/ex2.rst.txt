Exercice 2 : Manipulation des attributs d'une couche
====================================================

Objectif
--------

√Ä partir d'une couche vecteur de points repr√©sentants les principaux a√©roports,
cr√©er un script python permettant d'exporter un fichier CSV contenant,
pour chaque a√©roport *majeur* son nom, son code, sa latitude et sa longitude.

Donn√©es
-------

Les donn√©es proviennent de Natural Earth [#f1]_ :

| ‚Ä¢ ``ne_10m_airports.shp`` (Points - Localisation des a√©roports) ‚ûú `T√©l√©chargement <https://www.naturalearthdata.com/http//www.naturalearthdata.com/download/10m/cultural/ne_10m_airports.zip>`_
| ‚Ä¢ ``ne_10m_admin_0_countries.shp`` (Polygones - Pays du monde) ‚ûú `T√©l√©chargement <https://www.naturalearthdata.com/http//www.naturalearthdata.com/download/10m/cultural/ne_10m_admin_0_countries.zip>`_


Proc√©dure
---------

- Charger la couche vecteur ``ne_10m_airports.shp`` :

  * soit en faisant un gliss√©-d√©pos√© de ce fichier vers l'interface de QGIS,
  * soit en en utilisant le menu ``Couche > Ajouter une couche > Ajouter une couche vecteur...``

.. figure:: img/0_qgis_interface.png
  :width: 100%
  :align: center
  :figwidth: 98%


- De mani√®re similaire, charger la couche ``ne_10m_admin_0_countries.shp``.

- Modifier le style des couches pour obtenir le r√©sultat suivant :

  * Utilisation d'un pictogramme d'avion pour les a√©roports
  * Utilisation d'un fond de couleur beige/jaune pour les pays du monde.

.. pull-quote::
   Rappel: Le style de chacune des couches peut-√™tre modifi√© depuis le gestionnaire de couches, en s√©lectionannt une couche puis en faisant ``clic droit > Propri√©t√©s`` puis s√©lection de l'onglet *"Symbologie"*.
   QGIS offre de nombreux modes de rendu des couches (cat√©goris√©, gradu√©, etc.) en fonction du type de couche et du type d'information √† repr√©senter.

.. figure:: img/1_qgis_ouverture_style.png
  :width: 100%
  :align: center
  :figwidth: 98%

  ..

.. figure:: img/2_qgis_apres_style.png
  :width: 100%
  :align: center
  :figwidth: 98%

  ..

- Utiliser l'outil "Identifier" pour visualiser les attributs de chacune des entit√©s. Cet outil s'applique uniquement √† la couche active.

.. figure:: img/3_qgis_identifier.png
  :width: 100%
  :align: center
  :figwidth: 98%

  ..

- Pour voir l'ensemble de la table de donn√©es relative √† cette couche on peut ouvrir sa "table attributaire".

.. figure:: img/4_qgis_table_attributaire.png
  :width: 100%
  :align: center
  :figwidth: 98%

  ..

* Ouvrir la console python.

  S'assurer que la couche des a√©roports est bien celle qui est active.

  * Parcourir les diff√©rentes entit√©s de la couche :
    ::

      layer = iface.activeLayer()
      for ft in layer.getFeatures():
          print(ft)


  * Acc√©der aux attributs de chaque enregistrement :
    ::

      layer = iface.activeLayer()
      for ft in layer.getFeatures():
          print(ft['name'], ft['iata_code'], ft['type'])


  * Acc√©der √† la g√©om√©trie de chaque enregistrement :
    ::

      layer = iface.activeLayer()
      for ft in layer.getFeatures():
          geom = ft.geometry()
          geom_point = geom.asPoint()
          # L'objet `QgsPointXY` a notamment une m√©thode `x` et une m√©thode `y`
          print(geom_point, geom_point.x(), geom_point.y())


  * Obtenir les diff√©rentes modalit√©s du champ ``type`` en parcourant les
    diff√©rentes entit√©s dans une liste de compr√©hension :
    ::

      categories = list(set([ft['type'] for ft in layer.getFeatures()]))
      # print(categories)
      # ['military', 'spaceport', 'military mid', 'small', 'mid and military',
      #  'major and military', 'military major', 'mid', 'major']


  * Nous savons donc comment acc√©der aux diff√©rentes informations n√©cessaires pour r√©aliser l'export souhait√©.
    L'export au format CSV va n√©cessiter de structurer les valeurs relatives √†
    chaque enregistrement (ici √† chaque a√©roport) sous forme d'une liste.
    Le module ``csv`` de la biblioth√®que standard [#f2]_ se chargera d'√©crire
    correctement les valeurs de chaque enregistrement selon le type de fichier CSV souhait√©.
    ::

      layer = iface.activeLayer()
      for ft in layer.getFeatures():
          geom_point = ft.geometry().asPoint()
          # Nos enregistrements seront donc de la forme suivante
          row = [ft['name'], ft['iata_code'], geom_point.x(), geom_point.y()]


  * Il suffit de quelques lignes suppl√©mentaires pour √©crire ces informations dans un fichier :

    ::

      import csv

      output_file = open('/home/mthh/airports.csv', 'w', newline='')
      csv_writer = csv.writer(output_file)

      header_line = ["Nom", "Code_IATA", "Latitude", "Longitude"]
      csv_writer.writerow(header_line)

      for ft in layer.getFeatures():
          # Les r√©sultats ne sont pas encore filtr√©s selon le type d'aeroport !
          geom_point = ft.geometry().asPoint()
          csv_writer.writerow(
              [ft['name'], ft['iata_code'], geom_point.x(), geom_point.y()])

      output_file.close()


* | **√Ä vous de jouer !**
  | **Reprendre le script pr√©c√©dent afin de n'exporter que les a√©roports de type** `major` **et** `major and military`.
  | Enregistrer ce script sous le nom ``export_airports.py``.
  | Ex√©cuter le script pour v√©rifier de son bon fonctionnement.
  | Le fichier CSV export√© doit √™tre reconnu correctement par l'OS et s'ouvrir dans le tableur habituel (LibreOffice Calc, Microsoft Excel, etc.).
  | **Combien de lignes contient ce nouveau fichier CSV ?**
  | Connaissez-vous une autre m√©thode pour filtrer les a√©roports selon leur type ?


.. raw:: html

   <hr width="100%" size="18">
   <p class="align-center"><strong>üí° <a href="solutions/s_ex2.html">Solution de l'exercice 2</a></strong></p>



.. rubric:: Footnotes

.. [#f1] http://www.naturalearthdata.com/. Consult√© le 01/03/2020.
.. [#f2] https://docs.python.org/3/library/csv.html
